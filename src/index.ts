import { generateTaskList } from './helpers/generateTaskList'
import { doTask } from './helpers/doTask'

const concurrencyMax = 5
const taskDataLength = 50
const taskData = generateTaskList(taskDataLength)
let currentConcurrency = 0
let resolvedTaskCount = 0

// –í—ã–≤–æ–¥–∏–º –≤  –∫–æ–Ω—Å–æ–ª—å –¥–∞–Ω–Ω—ã–µ
const onEndTask = () => {
  resolvedTaskCount++
  console.log('üöÄ - currentConcurrency', currentConcurrency)
  console.log('üöÄ - concurrencyMax', concurrencyMax)
  console.log('üöÄ - resolvedTaskCount', resolvedTaskCount)
  console.log('üöÄ - taskDataLength', taskDataLength)
  currentConcurrency--
}

const onStartTask = () => {
  currentConcurrency++
}

const someFunc = async () => {
  // –°–æ–∑–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö –ø—Ä–æ–º–∏—Å–∞–º–∏
  const arrayOfPromises: any = []
  arrayOfPromises.length = concurrencyMax
  arrayOfPromises.fill(Promise.resolve())

  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
  const startTime = Date.now()

  const startNewTask = async (p: any) => {
    if (taskData.length) {
      // —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–µ–≥–æ
      // –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª shift –ø–æ—Ç–æ–º—É, —á—Ç–æ –ª–µ–≥—á–µ —É–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å –∫–æ–Ω—Ü–∞,
      // —á–µ–º —É–±—Ä–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞ –∏ –¥–≤–∏–≥–∞—Ç—å —É –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω–¥–µ–∫—Å
      const arg = taskData.pop()
      if (arg)
        // –æ–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞ –∏ –∑–∞–ø—É—Å–∫–∞–∞–µ–º–Ω–æ–≤—É—é
        // –≤ –ø–µ—Ä–≤—ã–µ 5 —Ä–∞–∑ —Ä–∞–∑—Ä–µ—à–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        // –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏–¥–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ arg –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        return p.then(() => {
          // –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
          // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º—ã–∫–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ, –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–¥–Ω–æ–π –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
          return startNewTask(doTask({ taskName: arg, onEndTask, onStartTask }))
        })
    }
    return p
  }
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–º–∏—Å—ã
  await Promise.all(arrayOfPromises.map(startNewTask))
  // –°–º–æ—Ç—Ä–∏–º –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  const dateDiff = startTime - Date.now()
  console.log('üöÄ - dateDiff', dateDiff)
}
someFunc()
